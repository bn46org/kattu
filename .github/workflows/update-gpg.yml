name: Update GPG File Workflow

on:
  workflow_dispatch:
    inputs:
      NEW_GITHUB_USERS:
        description: "Comma-separated list of GitHub usernames to add"
        required: true
        type: string
      NEW_SLACK_USER_IDS:
        description: "Comma-separated list of Slack user IDs corresponding to the GitHub users"
        required: true
        type: string

jobs:
  update-gpg-file:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Step 1 - Decrypt the GPG file
        run: |
          gpg --batch --yes --passphrase "${{ secrets.GPG_USER_MAP_PASSPHRASE }}" --output user_map.json --decrypt .github/keys/user_map.json.gpg

      - name: Step 2 - Add missing users
        run: |
          NEW_GITHUB_USERS="${{ inputs.NEW_GITHUB_USERS }}"
          NEW_SLACK_USER_IDS="${{ inputs.NEW_SLACK_USER_IDS }}"
          
          # Split the comma-separated lists into arrays
          IFS=',' read -r -a github_users <<< "$NEW_GITHUB_USERS"
          IFS=',' read -r -a slack_user_ids <<< "$NEW_SLACK_USER_IDS"
          
          # Check if both arrays have the same length
          if [ "${#github_users[@]}" -ne "${#slack_user_ids[@]}" ]; then
            echo "Error: The number of GitHub users and Slack user IDs must be the same."
            exit 1
          fi
          
          # Iterate over the arrays and add the users to the JSON file
          for i in "${!github_users[@]}"; do
            user="${github_users[$i]}"
            slack_id="${slack_user_ids[$i]}"
            
            echo "Adding GitHub user: $user with Slack ID: $slack_id"
            
            if jq -e --arg user "$user" '.[$user]' user_map.json > /dev/null; then
              echo "User $user already exists."
            else
              jq --arg user "$user" --arg slack_id "$slack_id" '.[$user] = $slack_id' user_map.json > temp.json && mv temp.json user_map.json
              echo "User $user added."
            fi
          done

      - name: Step 3 - Show the updated JSON output
        run: |
          echo "Updated user_map.json:"
          cat user_map.json

      - name: Step 4 - Encrypt the updated file with AES256
        run: |
          gpg --batch --yes --passphrase "${{ secrets.GPG_USER_MAP_PASSPHRASE }}" --symmetric --cipher-algo AES256 --output .github/keys/user_map.json.gpg user_map.json

      - name: Step 5 - Commit and push the updated file
        run: |
          git config --global user.email "github-bot@example.com"
          git config --global user.name "GitHub Action Bot"
          git add .github/keys/user_map.json.gpg
          git commit -m "Updated user map with new users"
          git push origin ${{ github.ref_name }}
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
