name: Notify Slack Workflow

on:
  workflow_call:
    inputs:
      GITHUB_USER:
        required: true
        type: string
      # PR_URL:
      #   required: true
      #   type: string
      # PR_TITLE:
      #   required: true
      #   type: string
      WORKFLOW:
        required: true
        type: string
      ACTION:
        required: true
        type: string
      COMMIT:
        required: true
        type: string
      REPO:
        required: true
        type: string
      JOB_URL:
        required: true
        type: string
      MESSAGE:
        required: true
        type: string
    secrets:
      SLACK_BOT_TOKEN:
        required: true
      GPG_USER_MAP_PASSPHRASE:
        required: true
      SLACK_CHANNEL_ID:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      GPG_USER_MAP_PASSPHRASE: ${{ secrets.GPG_USER_MAP_PASSPHRASE }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Install GPG
        run: |
          if ! command -v gpg > /dev/null; then
            sudo apt-get update && sudo apt-get install -y gnupg
          fi
      - name: Download and Decrypt Slack Users Map
        run: |
          curl -L -o user_map.json.gpg https://raw.githubusercontent.com/bn46org/kattu/develop/.github/keys/user_map.json.gpg
          gpg --batch --yes --passphrase "${{ secrets.GPG_USER_MAP_PASSPHRASE }}" --output user_map.json --decrypt user_map.json.gpg
  
      - name: Determine Slack Message and Get Slack User ID
        id: slack_message_id
        run: |
          SLACK_USERS_MAP=$(cat user_map.json)
      
          GITHUB_USER="${{ inputs.GITHUB_USER }}"
      
          SLACK_USER_ID=$(echo "$SLACK_USERS_MAP" | jq -r --arg user "$GITHUB_USER" '.[$user]')
      
          if [ -z "$SLACK_USER_ID" ] || [ "$SLACK_USER_ID" == "null" ]; then
            SLACK_USER_ID="${{ secrets.SLACK_CHANNEL_ID }}"
            SLACK_MESSAGE=":warning: *GitHub user $GITHUB_USER not mapped in Slack. Using fallback channel.*"
            #SLACK_MESSAGE_CONTENT="*Repository*: <${{ inputs.REPO_URL }}>\n\n*Commit ID*: <${{ inputs.COMMIT_URL }}>\n\n*PR URL*: <${{ inputs.PR_URL }}>\n\n*Job URL*: <${{ inputs.JOB_URL }}>\n\n*Message URL*: <${{ inputs.MESSAGE_URL }}>"
          else
            SLACK_MESSAGE="*PR Notification*"
            #SLACK_MESSAGE_CONTENT="*Repository*: <${{ inputs.REPO_URL }}>\n\n*Commit ID*: <${{ inputs.COMMIT_URL }}>\n\n*PR URL*: <${{ inputs.PR_URL }}>\n\n*Action*: ${{ inputs.ACTION }}\n\n*Job URL*: <${{ inputs.JOB_URL }}>\n\n*Message URL*: <${{ inputs.MESSAGE_URL }}>"
          fi
      
          echo "SLACK_USER_ID=$SLACK_USER_ID" >> $GITHUB_ENV
          echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV
          #echo "SLACK_MESSAGE_CONTENT=$SLACK_MESSAGE_CONTENT" >> $GITHUB_ENV

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: ${{ env.SLACK_USER_ID }}
          slack-message: |
            ${{ env.SLACK_MESSAGE }}
            *Repository*: ${{ inputs.REPO }}
            *Workflow*: ${{ inputs.WORKFLOW }}
            *Commit ID*: ${{ inputs.COMMIT }}
            *Action*: ${{ inputs.ACTION }}
            *Job*: ${{ inputs.JOB_URL }}
            *Message*: ${{ inputs.MESSAGE }}      
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
