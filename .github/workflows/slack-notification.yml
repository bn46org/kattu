name: Notify Slack Workflow

on:
  workflow_call:
    inputs:
      GITHUB_USER:
        required: true
        type: string
      PR_URL:
        required: true
        type: string
      PR_TITLE:
        required: true
        type: string
      REPOSITORY:
        required: true
        type: string
      ACTION:
        required: true
        type: string
    secrets:
      SLACK_BOT_TOKEN:
        required: true
      GPG_USER_MAP_PASSPHRASE:
        required: true
      SLACK_CHANNEL_ID:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      GPG_USER_MAP_PASSPHRASE: ${{ secrets.GPG_USER_MAP_PASSPHRASE }}
      SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: Install GPG
        run: |
          if ! command -v gpg > /dev/null; then
            sudo apt-get update && sudo apt-get install -y gnupg
          fi
      - name: Download and Decrypt Slack Users Map
        run: |
          curl -L -o user_map.json.gpg https://raw.githubusercontent.com/bn46org/kattu/develop/.github/keys/user_map.json.gpg
          gpg --batch --yes --passphrase "${{ secrets.GPG_USER_MAP_PASSPHRASE }}" --output user_map.json --decrypt user_map.json.gpg
      - name: Read Slack Users Map
        id: read_slack_map
        run: |
          SLACK_USERS_MAP=$(cat user_map.json)
          echo "SLACK_USERS_MAP=$SLACK_USERS_MAP"
          echo "SLACK_USERS_MAP=$SLACK_USERS_MAP" >> $GITHUB_ENV

          - name: Determine Slack Message and Get Slack User ID
            id: slack_message_id
            run: |
              # Determine Slack User ID from the decrypted user map
              SLACK_USERS_MAP=$(cat user_map.json)
              GITHUB_USER="${{ inputs.GITHUB_USER }}"
              SLACK_USER_ID=$(echo "$SLACK_USERS_MAP" | jq -r --arg user "$GITHUB_USER" '.[$user]')
          
              # Set default channel and message based on user ID presence
              if [ -z "$SLACK_USER_ID" ] || [ "$SLACK_USER_ID" == "null" ]; then
                SLACK_USER_ID="${{ secrets.SLACK_CHANNEL_ID }}"
                SLACK_MESSAGE=":warning: *GitHub user $GITHUB_USER not mapped in Slack. Using fallback channel.*"
                SLACK_MESSAGE_CONTENT="*Repository*: [${{ inputs.REPOSITORY }}](${{ inputs.REPO_URL }})\n
                *Commit ID*: [${{ inputs.COMMIT_SHA }}](${{ inputs.COMMIT_URL }})\n
                *PR URL*: ${{ inputs.PR_URL }}\n
                *Job URL*: [Job Details](${{ inputs.JOB_URL }})\n
                *Message URL*: [Message Details](${{ inputs.MESSAGE_URL }})"
              else
                SLACK_MESSAGE="*PR Notification*"
                SLACK_MESSAGE_CONTENT="*Repository*: [${{ inputs.REPOSITORY }}](${{ inputs.REPO_URL }})\n
                *Commit ID*: [${{ inputs.COMMIT_SHA }}](${{ inputs.COMMIT_URL }})\n
                *PR URL*: ${{ inputs.PR_URL }}\n
                *Action*: ${{ inputs.ACTION }}\n
                *Job URL*: [Job Details](${{ inputs.JOB_URL }})\n
                *Message URL*: [Message Details](${{ inputs.MESSAGE_URL }})"
              fi
          
              # Output environment variables for further steps
              echo "SLACK_USER_ID=$SLACK_USER_ID" >> $GITHUB_ENV
              echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV
              echo "SLACK_MESSAGE_CONTENT=$SLACK_MESSAGE_CONTENT" >> $GITHUB_ENV


      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.27.0
        with:
          channel-id: ${{ env.SLACK_USER_ID }}
          slack-message: |
            ${{ env.SLACK_MESSAGE }}
            ${{ env.SLACK_MESSAGE_CONTENT }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
