name: Build docker and push image to Docker Hub

on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        required: true
        type: string
      SERVICE_LOCATION:
        required: true
        type: string
      BUILD_ARTIFACT:
        required: false
        type: string
        default: false
      NPM_BUILD:
        required: false
        type: boolean
        default: false
      ONLY_DOCKER:
        required: false
        type: boolean
        default: false
      BASE_IMAGE_BUILD:
        required: false
        type: boolean
        default: false
      GITHUB_USER:
        required: true
        type: string
      PR_URL:
        required: true
        type: string
      PR_TITLE:
        required: true
        type: string
      REPOSITORY:
        required: true
        type: string
      ACTION:
        required: true
        type: string
    secrets:
      RELEASE_DOCKER_HUB:
        required: true
      ACTOR_DOCKER_HUB:
        required: true
      DEV_NAMESPACE_DOCKER_HUB:
        required: true
      # SLACK_BOT_TOKEN:
      #   required: true
      # GENERAL_CHANNEL_ID:  # Use the general channel ID secret here
      #   required: true
      # SLACK_USERS_MAP:
      #   required: true
      # GPG_USER_MAP_PASSPHRASE:
      #   required: true
jobs:
  build-dockers:
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.DEV_NAMESPACE_DOCKER_HUB }}
      SERVICE_LOCATION: ${{ inputs.SERVICE_LOCATION }}
      SERVICE_NAME: ${{ inputs.SERVICE_NAME }}
      GPG_USER_MAP_PASSPHRASE: ${{ secrets.GPG_USER_MAP_PASSPHRASE }}
      OPTIONAL_SLACK_CHANNEL_ID: ${{ secrets.GENERAL_CHANNEL_ID }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        if: ${{ ( inputs.BUILD_ARTIFACT != 'false' ) }}
        with:
          name: ${{ inputs.BUILD_ARTIFACT }}
          path: ./

      - name: Setup branch and env
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          echo "GPG_TTY=$(tty)" >> $GITHUB_ENV
          echo "${{ toJSON(inputs) }}"

      - name: Get version info from pom
        if: ${{ contains(inputs.NPM_BUILD, 'false') && ( inputs.BUILD_ARTIFACT != 'false' )  && ( inputs.ONLY_DOCKER == false ) }}
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.1.1
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml
          xpath: /*[local-name()="project"]/*[local-name()="version"]

      - name: Unzip and extract for docker build
        if: ${{ contains(inputs.NPM_BUILD, 'false' ) && ( inputs.BUILD_ARTIFACT != 'false' )  && ( inputs.ONLY_DOCKER == true )}}
        run: |
          unzip "${{ inputs.BUILD_ARTIFACT }}.zip" -d "${{ inputs.SERVICE_LOCATION }}"

      - name: Unzip and extract for maven
        if: ${{ contains(inputs.NPM_BUILD, 'false' ) && ( inputs.BUILD_ARTIFACT != 'false' ) && ( inputs.ONLY_DOCKER == false ) }}
        run: |
          unzip -uj "${{ inputs.BUILD_ARTIFACT }}.zip" "${{ inputs.SERVICE_LOCATION }}/target/*" -d "${{ env.SERVICE_LOCATION }}/target/"

      - name: Unzip and extract for npm
        if: ${{ contains(inputs.NPM_BUILD, 'true' ) && ( inputs.BUILD_ARTIFACT != false )  && ( inputs.ONLY_DOCKER == false )}}
        run: |
          unzip "${{ inputs.BUILD_ARTIFACT }}.zip" "dist/*" -d "${{ inputs.SERVICE_LOCATION }}"

      - name: Get current date
        run: echo "BUILD_TIME=$(date +'%Y-%m-%d-%H-%M-%S')"  >> $GITHUB_ENV

      - name: Check Dockerfile for 'mosip' user definition
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}
          DOCKERFILES=$(git ls-files | grep -w "Dockerfile")

          chk_layer=(
            "ARG\s+container_user=mosip"
            "ARG\s+container_user_group=mosip"
            "ARG\s+container_user_uid=1001"
            "ARG\s+container_user_gid=1001"
            "ENV\s+container_user=${container_user}
            "ENV\s+container_user_group=\\\${container_user_group}
            "ENV\s+container_user_uid=\\\${container_user_uid}
            "ENV\s+container_user_gid=\\\${container_user_gid}
            "WORKDIR\s+/home/\\\${container_user}"
            "chown\s+-R\s+\\\${container_user}:\\\${container_user}\s+/home/\\\${container_user}"
            "USER\s+\\\${container_user_uid}:\\\${container_user_gid}"
          )

          for FILE in $DOCKERFILES; do
            for layer in "${chk_layer[@]}"; do
              layer_count=$(grep -Ev '^$' "$FILE" | grep -Ec "$layer" || true)
          
              if [[ $layer_count -ne 1 ]]; then
                dlayer=$(echo $layer | sed -E 's/\\s\+/ /g' | sed -E 's/\\//g')
                echo "Docker layer: \"$dlayer\" not found in $FILE; EXITING"
                exit 1
              fi
            done
          done
        continue-on-error: true  
        if: ${{ inputs.BASE_IMAGE_BUILD == false }}

      - name: Build check for Docker datetime & git commit labels
        run: |
          cd ${{ inputs.SERVICE_LOCATION }}
           chk_layer=( "ARG\\s+SOURCE"
                       "ARG\\s+COMMIT_HASH"
                       "ARG\\s+COMMIT_ID"
                       "ARG\\s+BUILD_TIME"
                       "LABEL\\s+source=\\\${SOURCE}"
                       "LABEL\\s+commit_hash=\\\${COMMIT_HASH}"
                       "LABEL\\s+commit_id=\\\${COMMIT_ID}" 
                       "LABEL\\s+build_time=\\\${BUILD_TIME}"
          )
          
          for layer in "${chk_layer[@]}"; do
            layer_count=$( grep -Ev '^$' Dockerfile | grep -Ec "$layer" || true);
          
            if [[ $layer_count -ne 1 ]]; then
              dlayer=$( echo $layer | sed -E 's/\\s\+/ /g' | sed -E 's/\\//g' )
              echo "Docker layer : \"$dlayer\" not found; EXITING";
              exit 1;
            fi
          done
        continue-on-error: true  
        if: ${{ inputs.BASE_IMAGE_BUILD == false }}

      - name: Build image
        run: |
          if [[ ${{ inputs.BASE_IMAGE_BUILD }} == false ]]; then
            DOCKER_LABEL=$( echo "--build-arg COMMIT_HASH=$(git rev-parse HEAD) --build-arg COMMIT_ID=$(git rev-parse --short HEAD) --build-arg BUILD_TIME=$BUILD_TIME" )
          fi
          echo "DOCKER_LABEL = $DOCKER_LABEL "
          cd ${{ inputs.SERVICE_LOCATION }}
          docker build . --build-arg SOURCE=mosip --file Dockerfile $DOCKER_LABEL --tag ${{ env.SERVICE_NAME }}

      - name: Log into registry
        if: "${{ github.event_name != 'pull_request' }}"
        run: echo "${{secrets.RELEASE_DOCKER_HUB}}" | docker login -u ${{secrets.ACTOR_DOCKER_HUB}} --password-stdin

      - name: Push image
        if: "${{ github.event_name != 'pull_request' }}"
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          if [[ $BRANCH_NAME == master ]]; then
          VERSION=latest
          else
          VERSION=$BRANCH_NAME
          fi
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      - name: Notify Slack
        if: failure()
        uses: bn46org/kattu/.github/workflows/slack-notification.yml@develop
        with:
          GITHUB_USER: ${{ inputs.GITHUB_USER }}
          PR_TITLE: ${{ inputs.PR_TITLE }}
          PR_URL: ${{ inputs.PR_URL }}
          REPOSITORY: ${{ inputs.REPOSITORY }}
          ACTION: ${{ inputs.ACTION }}
        env:
          GPG_USER_MAP_PASSPHRASE: ${{ secrets.GPG_USER_MAP_PASSPHRASE }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.GENERAL_CHANNEL_ID }}
  # notify-slack:
  #   runs-on: ubuntu-latest
  #     env:
  #       GPG_USER_MAP_PASSPHRASE: ${{ secrets.GPG_USER_MAP_PASSPHRASE }}
  #       SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  #       SLACK_CHANNEL_ID: ${{ secrets.GENERAL_CHANNEL_ID }}
  #   uses: bn46org/kattu/.github/workflows/slack-notification.yml@develop
  #   with:
  #     GITHUB_USER: ${{ inputs.GITHUB_USER }}
  #     PR_TITLE: ${{ inputs.PR_TITLE }}
  #     PR_URL: ${{ inputs.PR_URL }}
  #     REPOSITORY: ${{ inputs.REPOSITORY }}
  #     ACTION: ${{ inputs.ACTION }}
      # Call the Slack notification reusable workflow

      # - name: Decrypt Slack Users Map
      #   if: failure()  # Runs only if the job fails
      #   id: slack_id
      #   env:
      #     GPG_USER_MAP_PASSPHRASE: ${{ secrets.GPG_USER_MAP_PASSPHRASE }}
      #     SLACK_CHANNEL_ID: ${{ secrets.GENERAL_CHANNEL_ID }}
      #   run: |
      #     # Install GPG if not already available
      #     if ! command -v gpg > /dev/null; then
      #       sudo apt-get update && sudo apt-get install -y gnupg
      #     fi
      #     # Download the user_map.json.gpg from the GitHub repository
      #     curl -L -o user_map.json.gpg https://raw.githubusercontent.com/bn46/kattu/develop/.github/keys/user_map.json.gpg
      #     # Decrypt user map file
      #     gpg --batch --yes --passphrase "$GPG_USER_MAP_PASSPHRASE" --output user_map.json --decrypt user_map.json.gpg
          
      #     # Read and parse user map
      #     SLACK_USERS_MAP=$(cat user_map.json)
          
      #     # Determine GitHub user (actor or pull request initiator)
      #     GITHUB_USER="${{ github.actor }}"
      #     if [ "${{ github.event_name }}" == "pull_request" ]; then
      #       GITHUB_USER="${{ inputs.GITHUB_USER }}"
      #     fi
          
      #     # Extract Slack user ID
      #     SLACK_USER_ID=$(echo "$SLACK_USERS_MAP" | jq -r --arg user "$GITHUB_USER" '.[$user]')
          
      #     # Fallback to default Slack channel if user not found
      #     if [ -z "$SLACK_USER_ID" ] || [ "$SLACK_USER_ID" == "null" ]; then
      #       SLACK_USER_ID="$SLACK_CHANNEL_ID"
      #       SLACK_MESSAGE=":warning: *GitHub user $GITHUB_USER not mapped in Slack. Using fallback channel.*\n*PR Notification* :x:"
      #     else
      #       SLACK_MESSAGE="*PR Notification* :x:"
      #     fi
          
      #     # Set environment variables for later steps
      #     echo "SLACK_USER_ID=$SLACK_USER_ID" >> $GITHUB_ENV
      #     echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV

      #   shell: bash
      # - name: Notify Slack
      #   #if: ${{ github.event_name != 'pull_request' && failure() }}  # Run only if it is not a pull request and the action fails
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.27.0
      #   with:
      #     channel-id: ${{ env.SLACK_USER_ID }}
      #     slack-message: |
      #       ${{ env.SLACK_MESSAGE }}
      #       *Repository*: ${{ inputs.REPOSITORY }}
      #       *Pull Request*: ${{ inputs.PR_TITLE }}
      #       *Action*: ${{ inputs.ACTION }}
      #       *PR URL*: ${{ inputs.PR_URL }}
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # - uses: bhumi46/actions-slack-notification@v2
      #   with:
      #     key: ${{ secrets.SLACK_OAUTH_TOKEN }}
      #     slack_user_mapping: ${{ secrets.SLACK_USER_MAPPING }}
      #     fields: repo,message,author,commit,workflow,job
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
      #     if: github.event_name != 'pull_request' && ( job.status == 'success' || job.status == 'failure' )

        # if: "${{ github.event_name != 'pull_request' && failure() }}" #

      # - name: Run Slack notification script
      #   if: ${{ always() }}
      #   run: |
      #     pwd
      #     chmod +x test.sh
      #     ./test.sh "$PR_AUTHOR" "$REPO" "$COMMIT" "$MESSAGE" "$STATUS" "$WORKFLOW" "$JOB_NAME" "$SLACK_MAPPING" "$SLACK_OAUTH_TOKEN"
      #   env:
      #     PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      #     REPO: ${{ github.repository }}
      #     COMMIT: ${{ github.sha }}
      #     MESSAGE: ${{ github.event.head_commit.message }}
      #     STATUS: ${{ job.status }}
      #     WORKFLOW: ${{ github.workflow }}
      #     JOB_NAME: ${{ github.job }}
      #     SLACK_MAPPING: ${{ secrets.SLACK_MAPPING }}  # Secret for Slack mapping

      # Step to process Slack notification logic
      # - name: Send Slack Notification
      #   if: ${{ always() }}
      #   env:
      #     SLACK_MAPPING: ${{ secrets.SLACK_MAPPING }}
      #     SLACK_OAUTH_TOKEN: ${{ secrets.SLACK_OAUTH_TOKEN }}
      #     PR_AUTHOR: ${{ github.event.pull_request.user.login }}
      #     REPO: ${{ github.repository }}
      #     COMMIT: ${{ github.sha }}
      #     MESSAGE: ${{ github.event.head_commit.message }}
      #     STATUS: ${{ job.status }}
      #     WORKFLOW: ${{ github.workflow }}
      #     JOB_NAME: ${{ matrix.SERVICE_NAME }}
      #   run: |
      #     sudo apt-get install -y curl jq
      #     echo "Start Slack notification debug..."
      #     echo "PR Author: $PR_AUTHOR"
      #     echo "Repository: $REPO"
      #     echo "Commit SHA: $COMMIT"
      #     echo "Commit Message: $MESSAGE"
      #     echo "Build Status: $STATUS"
      #     echo "Workflow: $WORKFLOW"
      #     echo "Job Name: $JOB_NAME"
      #     echo "Slack Mapping: $SLACK_MAPPING"

      #     # Get the Slack user ID from the mapping using jq
      #     SLACK_AUTHOR=$(echo "$SLACK_MAPPING" | jq -r --arg pr_author "$PR_AUTHOR" '.[$pr_author]')
      #     echo "Slack user mapped to PR Author: $SLACK_AUTHOR"

      #     # Get the Slack user ID from the mapping
      #     SLACK_AUTHOR=$(echo "$SLACK_MAPPING" | jq -r --arg pr_author "$PR_AUTHOR" '.[$pr_author]')
      #     echo "Slack user mapped to PR Author: $SLACK_AUTHOR"


      #     if [[ -z "$SLACK_AUTHOR" || "$SLACK_AUTHOR" == "null" ]]; then
      #       echo "Slack mapping not found for $PR_AUTHOR; exiting"
      #       exit 1
      #     fi

      #     # Create the message
      #     slack_message="Build Status: *$STATUS*
      #     Repository: *$REPO*
      #     Commit: *$COMMIT*
      #     Message: *$MESSAGE*
      #     Author: *$PR_AUTHOR*
      #     Workflow: *$WORKFLOW*
      #     Job: *$JOB_NAME*"

      #     # Send the message to Slack
      #     echo "Sending Slack notification to: @$SLACK_AUTHOR"
      #     curl -X POST -H "Authorization: Bearer $SLACK_OAUTH_TOKEN" \
      #     -H 'Content-type: application/json' \
      #     --data "{
      #       \"channel\": \"@$SLACK_AUTHOR\",
      #       \"text\": \"$slack_message\"
      #     }" https://slack.com/api/chat.postMessage

      #     echo "Slack notification sent successfully!"


      # - name: Send Slack Notification
      #   uses: bhumi46/slack-notification-action@v1.0.0
      #   with:
      #     pr_author: ${{ github.actor }}
      #     repo: ${{ github.repository }}
      #     commit: ${{ github.sha }}
      #     message: ${{ github.event.head_commit.message }}
      #     status: ${{ job.status }}
      #     workflow: ${{ github.workflow }}
      #     job_name: ${{ github.job }}
      #     slack_mapping: ${{ secrets.SLACK_MAPPING }}
      #     slack_oauth_token: ${{ secrets.SLACK_OAUTH_TOKEN }}
      #   if: "${{ github.event_name != 'pull_request' && failure() }}" 


